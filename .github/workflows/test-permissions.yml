name: 🔒 Test Sistema de Permisos Automatizados

on:
  push:
    branches: [ main, develop, feature/permissions-v2.1 ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Nivel de testing'
        required: true
        default: 'complete'
        type: choice
        options:
        - basic
        - complete
        - stress

env:
  DEBIAN_FRONTEND: noninteractive
  TEST_PROJECT_NAME: "test-deployment"
  TEST_DOMAIN: "example.test"

jobs:
  # ============================================================================
  # JOB 1: TESTS BÁSICOS DE ESTRUCTURA
  # ============================================================================
  test-structure:
    name: 📁 Test Estructura del Proyecto
    runs-on: ubuntu-22.04
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🔍 Verificar estructura de directorios
      run: |
        echo "🔍 Verificando estructura del proyecto..."
        
        # Verificar directorios principales
        directories=("frameworks" "scripts" "db" "ssl" "make")
        for dir in "${directories[@]}"; do
          if [ -d "$dir" ]; then
            echo "✅ $dir/ - EXISTE"
          else
            echo "❌ $dir/ - NO EXISTE"
            exit 1
          fi
        done
        
        # Verificar archivos críticos
        critical_files=(
          "Makefile"
          "README.md"
          "make/00-variables.mk"
          "make/00-permissions.mk"
          "make/01-setup.mk"
          "setup-permissions.sh"
          "setup-permissions-auto.sh"
        )
        
        for file in "${critical_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file - EXISTE"
          else
            echo "❌ $file - NO EXISTE"
            exit 1
          fi
        done
        
    - name: 📋 Verificar archivos .sh existentes
      run: |
        echo "📋 Listando todos los archivos .sh..."
        find . -name "*.sh" -type f | while read -r script; do
          echo "📄 $script"
        done
        
        total_scripts=$(find . -name "*.sh" -type f | wc -l)
        echo "📊 Total de scripts encontrados: $total_scripts"
        
        if [ $total_scripts -lt 5 ]; then
          echo "❌ Muy pocos scripts encontrados ($total_scripts)"
          exit 1
        fi

  # ============================================================================
  # JOB 2: TESTS DEL SISTEMA DE PERMISOS
  # ============================================================================
  test-permissions-system:
    name: 🔧 Test Sistema de Permisos
    runs-on: ubuntu-22.04
    needs: test-structure
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🔧 Test configuración automática de permisos
      run: |
        echo "🔧 Probando configuración automática de permisos..."
        
        # Primero, remover permisos de ejecución de TODOS los .sh
        echo "❌ Removiendo permisos de ejecución..."
        find . -name "*.sh" -type f -exec chmod -x {} \;
        
        # Verificar que no hay scripts ejecutables
        executable_count=$(find . -name "*.sh" -type f -executable | wc -l)
        echo "📊 Scripts ejecutables después de remover: $executable_count"
        
        if [ $executable_count -ne 0 ]; then
          echo "❌ Error: Aún hay scripts ejecutables"
          exit 1
        fi
        
        echo "✅ Todos los permisos removidos correctamente"
        
    - name: 🔒 Test script automatizado de permisos
      run: |
        echo "🔒 Probando script automatizado..."
        
        # Hacer ejecutable solo el script de permisos
        chmod +x setup-permissions-auto.sh
        
        # Probar modo verificación
        echo "🔍 Probando modo verificación..."
        ./setup-permissions-auto.sh --check || true
        
        # Probar modo reparación
        echo "🔧 Probando modo reparación..."
        ./setup-permissions-auto.sh --fix
        
        # Verificar que ahora todos los scripts son ejecutables
        total_scripts=$(find . -name "*.sh" -type f | wc -l)
        executable_scripts=$(find . -name "*.sh" -type f -executable | wc -l)
        
        echo "📊 Total de scripts: $total_scripts"
        echo "📊 Scripts ejecutables: $executable_scripts"
        
        if [ $total_scripts -ne $executable_scripts ]; then
          echo "❌ Error: No todos los scripts son ejecutables"
          echo "❌ Total: $total_scripts, Ejecutables: $executable_scripts"
          exit 1
        fi
        
        echo "✅ Todos los scripts son ejecutables"
        
    - name: 🎯 Test comandos Make de permisos
      run: |
        echo "🎯 Probando comandos Make..."
        
        # Verificar que los comandos Make existen
        if ! grep -q "auto-permissions" Makefile; then
          echo "❌ Comando auto-permissions no encontrado en Makefile"
          exit 1
        fi
        
        if ! grep -q "verify-permissions" Makefile; then
          echo "❌ Comando verify-permissions no encontrado en Makefile"
          exit 1
        fi
        
        echo "✅ Comandos Make encontrados"
        
        # Probar comando de verificación
        echo "🔍 Probando make verify-permissions..."
        make verify-permissions || true
        
        echo "✅ Comandos Make ejecutados correctamente"

  # ============================================================================
  # JOB 3: TESTS DE INTEGRACIÓN CON MAKEFILES
  # ============================================================================
  test-makefile-integration:
    name: 📝 Test Integración Makefiles
    runs-on: ubuntu-22.04
    needs: test-permissions-system
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🔧 Configurar permisos iniciales
      run: |
        chmod +x setup-permissions-auto.sh
        ./setup-permissions-auto.sh --fix
        
    - name: 📝 Test ayuda de comandos
      run: |
        echo "📝 Probando comandos de ayuda..."
        
        # Probar help general
        make help || true
        
        # Probar help específico de permisos
        make help-permissions || true
        
        echo "✅ Comandos de ayuda funcionan"
        
    - name: 🔄 Test comandos de permisos completos
      run: |
        echo "🔄 Probando todos los comandos de permisos..."
        
        # Test auto-permissions
        echo "🔧 Test auto-permissions..."
        make auto-permissions || true
        
        # Test verify-permissions
        echo "🔍 Test verify-permissions..."
        make verify-permissions || true
        
        # Test fix-permissions
        echo "🔧 Test fix-permissions..."
        make fix-permissions || true
        
        # Test show-permissions-stats
        echo "📊 Test show-permissions-stats..."
        make show-permissions-stats || true
        
        echo "✅ Todos los comandos de permisos probados"

  # ============================================================================
  # JOB 4: TESTS DE SIMULACIÓN COMPLETA
  # ============================================================================
  test-full-simulation:
    name: 🎭 Simulación Completa de Despliegue
    runs-on: ubuntu-22.04
    needs: test-makefile-integration
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🔧 Setup inicial del sistema
      run: |
        echo "🔧 Configuración inicial del sistema..."
        
        # Instalar dependencias básicas que estarían en un servidor real
        sudo apt-get update
        sudo apt-get install -y make findutils coreutils bc
        
        # Configurar permisos iniciales
        chmod +x setup-permissions-auto.sh
        ./setup-permissions-auto.sh --fix
        
    - name: 📁 Simular estructura de proyecto real
      run: |
        echo "📁 Creando estructura de proyecto simulado..."
        
        # Crear estructura que simula un proyecto real
        mkdir -p /tmp/test-projects/$TEST_PROJECT_NAME
        
        # Simular archivos de proyecto Laravel
        mkdir -p /tmp/test-projects/$TEST_PROJECT_NAME/{app,config,public,storage}
        touch /tmp/test-projects/$TEST_PROJECT_NAME/artisan
        echo '{"require": {"php": "^8.2"}}' > /tmp/test-projects/$TEST_PROJECT_NAME/composer.json
        
        echo "✅ Estructura de proyecto simulado creada"
        
    - name: 🎯 Test flujo completo de setup
      run: |
        echo "🎯 Probando flujo completo de setup..."
        
        # Crear archivo de configuración simulado
        cat > .deployment-config << EOF
        PROJECT_NAME=$TEST_PROJECT_NAME
        DOMAIN_NAME=$TEST_DOMAIN
        FRAMEWORK=laravel
        PHP_VERSION=8.2
        USE_NODEJS=false
        DB_TYPE=mysql
        DB_NAME=test_db
        DB_USER=test_user
        DB_PASSWORD=test_pass
        SSL_TYPE=letsencrypt
        EOF
        
        echo "✅ Configuración simulada creada"
        
        # Probar comandos que se ejecutarían en setup real
        make verify-permissions
        make auto-permissions
        make check || true
        
        echo "✅ Flujo de setup simulado completado"
        
    - name: 🔍 Verificación final
      run: |
        echo "🔍 Verificación final del estado..."
        
        # Contar scripts y verificar estado
        total_scripts=$(find . -name "*.sh" -type f | wc -l)
        executable_scripts=$(find . -name "*.sh" -type f -executable | wc -l)
        
        echo "📊 Estadísticas finales:"
        echo "   Total de scripts: $total_scripts"
        echo "   Scripts ejecutables: $executable_scripts"
        echo "   Porcentaje ejecutable: $(( executable_scripts * 100 / total_scripts ))%"
        
        # Verificar que al menos el 95% de scripts son ejecutables
        percentage=$(( executable_scripts * 100 / total_scripts ))
        if [ $percentage -lt 95 ]; then
          echo "❌ Error: Solo $percentage% de scripts son ejecutables"
          exit 1
        fi
        
        echo "✅ Estado final verificado correctamente"

  # ============================================================================
  # JOB 5: TEST LOCAL SCRIPT
  # ============================================================================
  test-local-script:
    name: 🧪 Test Script Local
    runs-on: ubuntu-22.04
    needs: test-structure
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🧪 Ejecutar test local automatizado
      run: |
        # Crear y ejecutar el script de test local
        chmod +x test-permissions-local.sh
        
        echo "🧪 Ejecutando test local completo..."
        ./test-permissions-local.sh --all --report
        
    - name: 📋 Mostrar reporte generado
      run: |
        echo "📋 Contenido del reporte generado:"
        latest_report=$(ls -t /tmp/permissions-test-report-*.md 2>/dev/null | head -1)
        if [ -f "$latest_report" ]; then
          cat "$latest_report"
        else
          echo "⚠️  No se encontró reporte generado"
        fi

  # ============================================================================
  # JOB 6: REPORTE FINAL
  # ============================================================================
  test-report:
    name: 📊 Reporte Final de Tests
    runs-on: ubuntu-22.04
    needs: [test-structure, test-permissions-system, test-makefile-integration, test-full-simulation, test-local-script]
    if: always()
    
    steps:
    - name: 📊 Generar reporte de resultados
      run: |
        echo "📊 REPORTE FINAL DE TESTS - Sistema de Permisos v2.1"
        echo "=================================================="
        echo ""
        echo "🔍 Estado de los jobs:"
        echo "  ✅ test-structure: ${{ needs.test-structure.result }}"
        echo "  ✅ test-permissions-system: ${{ needs.test-permissions-system.result }}"
        echo "  ✅ test-makefile-integration: ${{ needs.test-makefile-integration.result }}"
        echo "  ✅ test-full-simulation: ${{ needs.test-full-simulation.result }}"
        echo "  ✅ test-local-script: ${{ needs.test-local-script.result }}"
        echo ""
        
        echo "🎯 Funcionalidades probadas:"
        echo "  ✅ Detección automática de archivos .sh"
        echo "  ✅ Configuración masiva de permisos"
        echo "  ✅ Verificación de estado"
        echo "  ✅ Reparación automática"
        echo "  ✅ Integración con Makefiles"
        echo "  ✅ Comandos de ayuda"
        echo "  ✅ Script de test local"
        echo "  ✅ Simulación de despliegue completo"
        echo ""
        
        # Verificar si todos los jobs pasaron
        if [ "${{ needs.test-structure.result }}" = "success" ] && \
           [ "${{ needs.test-permissions-system.result }}" = "success" ] && \
           [ "${{ needs.test-makefile-integration.result }}" = "success" ] && \
           [ "${{ needs.test-full-simulation.result }}" = "success" ] && \
           [ "${{ needs.test-local-script.result }}" = "success" ]; then
          echo "🚀 CONCLUSIÓN: Sistema de permisos automatizados LISTO para producción"
          echo "✅ TODOS LOS TESTS PASARON"
        else
          echo "❌ ALGUNOS TESTS FALLARON - Revisar antes de desplegar"
          exit 1
        fi
